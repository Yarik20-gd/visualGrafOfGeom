

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;

varying vec3 vV,vN;

void main() {
    vV=vertex;
    vN=normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vV,vN;
uniform vec4 color;
uniform vec3 p, d;
uniform float l, s;
void main() {
    vec3 toLight = normalize(p-vV);
    vec3 toView = normalize(-vV);
    vec3 halfVector = normalize(toLight + toView);
    vec3 normed = normalize(vN);
    float dotFromDirection = dot(toLight, 
                               -d);
    float inLight = smoothstep(l,l+s, dotFromDirection);
    float light = inLight * dot(normed, toLight);
    float specular = inLight * pow(dot(normed, halfVector), 80.0);
    vec3 colored = color.rgb*light+specular;
    gl_FragColor = vec4(colored,1.0);
    //gl_FragColor = vec4(normed,1.0);
    if(s>10.0){
        gl_FragColor = vec4(normed,1.0);
    }
    if(s>30.0){
        gl_FragColor = vec4(1.0);
    }
}`;